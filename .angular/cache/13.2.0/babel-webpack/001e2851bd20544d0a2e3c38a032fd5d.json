{"ast":null,"code":"var _a, _b;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSort } from '@angular/material/sort';\nimport { FormBuilder, FormControl } from '@angular/forms';\nimport { StatusService } from '@app/@shared/services/status/status.service';\nimport { ParnerService } from '@app/@shared/services/partner/partner.service';\nimport { LoadingEvent } from '@app/@shared/events/loading.event';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogSignaturesListComponent } from './dialog-signatures-list/dialog-signatures-list';\nimport { ContractService } from '@app/@shared/services/contract/contract.service';\nimport { saveAs } from 'file-saver';\nlet ContractComponent = class ContractComponent {\n  constructor(formBuilder, dialog, statusService, partnerService, contractService) {\n    this.formBuilder = formBuilder;\n    this.dialog = dialog;\n    this.statusService = statusService;\n    this.partnerService = partnerService;\n    this.contractService = contractService;\n    this.contractList = [];\n    this.parsedList = [];\n    this.showFilter = false;\n    this.pageForm = this.formBuilder.group({\n      veiculo: new FormControl(''),\n      checkin: new FormControl(''),\n      checkout: new FormControl(''),\n      diaria: new FormControl(''),\n      vlr_diaria: new FormControl(''),\n      total: new FormControl(''),\n      parceiro: new FormControl(''),\n      status: new FormControl('')\n    });\n    this.displayedColumns = ['id', 'veiculo', 'docstatus', 'checkin', 'checkout', 'diaria', 'vlr_diaria', 'total', 'parceiro', 'status', 'download', 'signatures', 'options'];\n  }\n\n  ngOnInit() {\n    LoadingEvent.load(true);\n    this.statusService.list().subscribe(v => this.statusList = v);\n    this.partnerService.partnerList().subscribe(v => {\n      this.partnerList = v;\n      console.log({\n        v\n      });\n    });\n    this.partnerService.getRegisters().subscribe(data => {\n      console.log('data', data);\n      this.contractList = data;\n      data.map((register, i) => {\n        const payload = JSON.parse(register.payload);\n        console.log({\n          payload\n        });\n        this.parsedList.push({\n          id: register.id,\n          veiculo: payload.veiculo,\n          checkin: payload.checkin,\n          checkout: payload.checkout,\n          diaria: payload.diaria,\n          vlr_diaria: payload.vlr_diaria,\n          total: payload.total,\n          parceiro: payload.parceiro,\n          status: payload.status,\n          signatures: this.handleSignatures(payload.attachments),\n          attachments: payload.attachments\n        });\n      });\n      this.dataSource = new MatTableDataSource(this.parsedList); //  LoadingEvent.load(false);\n    }, () => {//   LoadingEvent.load(false);\n    });\n  }\n\n  handleSignatures(attachment) {\n    if (!attachment || !attachment.signatureList) {\n      return undefined;\n    }\n\n    const totalSigns = attachment.signatureList.length;\n    const totalContractSigned = attachment.signatureList.filter(el => el.signed).length;\n    return `${totalContractSigned}/${totalSigns}`;\n  }\n\n  sortData(sort) {\n    console.log(sort);\n  }\n\n  downloadFile(id) {\n    const contract = this.parsedList.find(el => el.id === id);\n\n    if (contract && contract.attachments) {\n      const {\n        hash\n      } = contract.attachments;\n\n      if (hash) {\n        this.contractService.getSignedDoc(hash + '.pdf').subscribe(value => {\n          // console.log({ value });\n          // const file2 = new File([value], 'filename.pdf', { type: 'application/pdf' });\n          // console.log({ file2 });\n          // const file = new Blob([file2], { type: 'application/pdf' });\n          // const fileURL = URL.createObjectURL(file);\n          // // window.open(fileURL);\n          // var anchor = document.createElement('a');\n          // anchor.href = fileURL;\n          // FileSave\n          // anchor.download = 'test.pdf';\n          // console.log({ file, file2, fileURL });\n          // anchor.click();\n          const file = new Blob([value], {\n            type: 'application/pdf'\n          });\n          saveAs(file); // this._FileSaverService.save(value, 'test.pdf');\n        }, err => {\n          console.log({\n            err\n          });\n        });\n      }\n    }\n  }\n\n  showListSignatures(id) {\n    const dialogRef = this.dialog.open(DialogSignaturesListComponent, {\n      width: '600px',\n      data: {\n        id,\n        contract: this.parsedList.find(el => el.id === id)\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n\n  ngAfterViewInit() {//  this.dataSource.sort = this.sort;\n  }\n\n  onSubmit() {}\n\n  print() {\n    window.print();\n  }\n\n};\n\n__decorate([ViewChild(MatSort), __metadata(\"design:type\", typeof (_a = typeof MatSort !== \"undefined\" && MatSort) === \"function\" ? _a : Object)], ContractComponent.prototype, \"sort\", void 0);\n\nContractComponent = __decorate([Component({\n  selector: 'app-contract',\n  templateUrl: './contract.component.html',\n  styleUrls: ['./contract.component.scss']\n}), __metadata(\"design:paramtypes\", [FormBuilder, typeof (_b = typeof MatDialog !== \"undefined\" && MatDialog) === \"function\" ? _b : Object, StatusService, ParnerService, ContractService])], ContractComponent);\nexport { ContractComponent };","map":null,"metadata":{},"sourceType":"module"}